AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  excel-competencies-tracking

  In API Gateway, this API is called 'excel-competencies-tracking-sam-app'

  SAM Template for excel-competencies-tracking repo (https://github.com/walkman1915/excel-competencies-tracking).
  Junior Design project for team JD 9350.

Globals:
  Function:
    Timeout: 3
Parameters:
  CognitoUserPoolName:
    Type: String
    Default: excel-tracking-user-pool
  CognitoUserPoolClientName:
    Type: String
    Default: excel-tracking-user-pool-client
Resources:

  ############ Lambda Functions ############
  PostAuthenticationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: auth/postauth
      Handler: postauth.lambdaHandler
      Runtime: nodejs12.x
      Events:
        PreSignUp:
          Type: Cognito
          Properties:
            UserPool: 
              Ref: CognitoUserPool   
            Trigger: PostAuthentication
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
          - Sid: DynamoDBPutPolicy # Creates a specific, custom inline policy
            Effect: Allow
            Action:
              - dynamodb:PutItem
            Resource:
              - !Sub
                - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                - { tableName: !Ref UsersDDBTable}
              - !Sub
                - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                - { tableName: !Ref UsersDDBTable}
      Environment:
        Variables:
          USERS_DDB_TABLE_NAME: !Ref UsersDDBTable # Allows us to access the var "USERS_DDB_TABLE_NAME" in this lambda's javascript code 
  PreSignUpFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: auth/signup
      Handler: signup.lambdaHandler
      Runtime: nodejs12.x
      Events:
        PreSignUp:
          Type: Cognito
          Properties:
            UserPool: !Ref CognitoUserPool
            Trigger: PreSignUp
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
          - Sid: DynamoDBPutPolicy # Creates a specific, custom inline policy
            Effect: Allow
            Action:
              - dynamodb:PutItem
            Resource:
              - !Sub
                - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                - { tableName: !Ref UsersDDBTable}
              - !Sub
                - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                - { tableName: !Ref UsersDDBTable}
      Environment:
        Variables:
          USERS_DDB_TABLE_NAME: !Ref UsersDDBTable # Allows us to access the var "USERS_DDB_TABLE_NAME" in this lambda's javascript code 
  ExportEvaluationsFunction:
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/evaluations/export
      Handler: get.lambdaHandler
      Runtime: nodejs12.x
      Events:
        GetEvaluations:
          Type: Api
          Properties:
            Path: /evaluations/export
            Method: get
            RestApiId: !Ref ExcelApi
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
            - Sid: DynamoDBGetPolicy # Creates a specific, custom inline policy
              Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:Scan
              Resource:
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                  - { tableName: !Ref EvaluationsDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                  - { tableName: !Ref EvaluationsDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                  - { tableName: !Ref UsersDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                  - { tableName: !Ref UsersDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                  - { tableName: !Ref TrackingLocationToCompetenciesDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                  - { tableName: !Ref TrackingLocationToCompetenciesDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                  - { tableName: !Ref CompetenciesMasterDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                  - { tableName: !Ref CompetenciesMasterDDBTable}
            - Sid: S3WritePolicy
              Effect: Allow
              Action:
                - s3:PutObject
              Resource:
                - !Sub
                  - arn:${AWS::Partition}:s3:::${bucketName}/*
                  - { bucketName: !Ref EvaluationsExportS3Bucket}
            - Sid: S3ReadPolicy
              Effect: Allow
              Action:
                - s3:GetObject
              Resource:
                - !Sub
                  - arn:${AWS::Partition}:s3:::${bucketName}/*
                  - { bucketName: !Ref EvaluationsExportS3Bucket}
            - Sid: SESCrudPolicy
              Effect: Allow
              Action:
                - ses:SendEmail
                - ses:SendRawEmail
                - ses:GetIdentityVerificationAttributes
                - ses:VerifyEmailIdentity
              Resource: "*"

      Environment:
        Variables:
          EVALUATIONS_DDB_TABLE_NAME: !Ref EvaluationsDDBTable # Allows us to access the var "EVALUATIONS_DDB_TABLE_NAME" in this lambda's javascript code
          USERS_DDB_TABLE_NAME: !Ref UsersDDBTable
          TRACKING_LOCATIONS_TO_COMPETENCIES_DDB_TABLE_NAME: !Ref TrackingLocationToCompetenciesDDBTable
          COMPETENCIES_DDB_TABLE_NAME: !Ref CompetenciesMasterDDBTable
          EXPORT_EVALUATION_BUCKET: !Ref EvaluationsExportS3Bucket
  AddUserFunction:
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/users/
      Handler: post.lambdaHandler
      Layers:
        - !Ref AuthenticationLayer
        - !Ref DataValidation
      Runtime: nodejs12.x
      Events:
        GetCompetencies:
          Type: Api
          Properties:
            RestApiId: !Ref ExcelApi
            Path: /users
            Method: post
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
            - Sid: DynamoDBPutPolicy # Creates a specific, custom inline policy
              Effect: Allow
              Action:
                - dynamodb:PutItem
              Resource:
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                  - { tableName: !Ref UsersDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                  - { tableName: !Ref UsersDDBTable}
      Environment:
        Variables:
          USERS_DDB_TABLE_NAME: !Ref UsersDDBTable # Allows us to access the var "USERS_DDB_TABLE_NAME" in this lambda's javascript code
  AddEvaluationFunction: #Function for adding a new evaluation to the table
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/evaluations/
      Handler: post.lambdaHandler
      Layers:
        - !Ref AuthenticationLayer
        - !Ref DataValidation
      Runtime: nodejs12.x
      Events:
        AddEvaluation:
          Type: Api
          Properties:
            RestApiId: !Ref ExcelApi
            Path: /evaluations
            Method: post
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
            - Sid: DynamoDBPutPolicy # Creates a specific, custom inline policy
              Effect: Allow
              Action:
                - dynamodb:PutItem
              Resource:
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                  - { tableName: !Ref EvaluationsDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                  - { tableName: !Ref EvaluationsDDBTable}
      Environment:
        Variables:
          EVALUATIONS_DDB_TABLE_NAME: !Ref EvaluationsDDBTable # Allows us to access the var "EVALUATIONS_DDB_TABLE_NAME" in this lambda's javascript code
  DeleteEvaluationFunction: #Function for deleting a specific evaluation from the table
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/evaluations/{userId}/{compId}/{timeStamp}
      Handler: delete.lambdaHandler
      Layers:
        - !Ref AuthenticationLayer
      Runtime: nodejs12.x
      Events:
        DeleteEvaluation:
          Type: Api
          Properties:
            RestApiId: !Ref ExcelApi
            Path: /evaluations/{userId}/{compId}/{timeStamp}
            Method: delete
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
            - Sid: DynamoDBDeletePolicy # Creates a specific, custom inline policy
              Effect: Allow
              Action:
                - dynamodb:DeleteItem
                - dynamodb:GetItem
              Resource:
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                  - { tableName: !Ref EvaluationsDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                  - { tableName: !Ref EvaluationsDDBTable}
      Environment:
        Variables:
          EVALUATIONS_DDB_TABLE_NAME: !Ref EvaluationsDDBTable # Allows us to access the var "EVALUATIONS_DDB_TABLE_NAME" in this lambda's javascript code
  GetEvaluationsFunction: #Function for getting all of the evaluations in the table
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/evaluations/
      Handler: get.lambdaHandler
      Layers:
        - !Ref AuthenticationLayer
      Runtime: nodejs12.x
      Events:
        GetEvaluations:
          Type: Api
          Properties:
            RestApiId: !Ref ExcelApi
            Path: /evaluations
            Method: get
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
            - Sid: DynamoDBGetPolicy # Creates a specific, custom inline policy
              Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:Scan
              Resource:
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                  - { tableName: !Ref EvaluationsDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                  - { tableName: !Ref EvaluationsDDBTable}
      Environment:
        Variables:
          EVALUATIONS_DDB_TABLE_NAME: !Ref EvaluationsDDBTable # Allows us to access the var "EVALUATIONS_DDB_TABLE_NAME" in this lambda's javascript code
  GetEvaluationsForUserFunction: # Function for getting all of the evaluations for a specific student
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/evaluations/{userId}
      Handler: get.lambdaHandler
      Layers:
        - !Ref AuthenticationLayer
      Runtime: nodejs12.x
      Events:
        GetEvaluationsForUser:
          Type: Api
          Properties:
            RestApiId: !Ref ExcelApi
            Path: /evaluations/{userId}
            Method: get
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
            - Sid: DynamoDBGetPolicy # Creates a specific, custom inline policy
              Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:Scan
              Resource:
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                  - { tableName: !Ref EvaluationsDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                  - { tableName: !Ref EvaluationsDDBTable}
      Environment:
        Variables:
          EVALUATIONS_DDB_TABLE_NAME: !Ref EvaluationsDDBTable # Allows us to access the var "EVALUATIONS_DDB_TABLE_NAME" in this lambda's javascript code
  GetEvaluationsForUserAndCompFunction: # Function for getting all of the evaluations for a specific student for a specific competency
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/evaluations/{userId}/{compId}
      Handler: get.lambdaHandler
      Layers:
        - !Ref AuthenticationLayer
      Runtime: nodejs12.x
      Events:
        GetEvaluationsForUserAndComp:
          Type: Api
          Properties:
            RestApiId: !Ref ExcelApi
            Path: /evaluations/{userId}/{compId}
            Method: get
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
            - Sid: DynamoDBGetPolicy # Creates a specific, custom inline policy
              Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:Scan
              Resource:
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                  - { tableName: !Ref EvaluationsDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                  - { tableName: !Ref EvaluationsDDBTable}
      Environment:
        Variables:
          EVALUATIONS_DDB_TABLE_NAME: !Ref EvaluationsDDBTable # Allows us to access the var "EVALUATIONS_DDB_TABLE_NAME" in this lambda's javascript code
  GetSpecificEvaluationFunction: # Function for getting a specific evaluation matching a user id, comp id, and timestamp
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/evaluations/{userId}/{compId}/{timeStamp}
      Handler: get.lambdaHandler
      Layers:
        - !Ref AuthenticationLayer
      Runtime: nodejs12.x
      Events:
        GetSpecificEvaluation:
          Type: Api
          Properties:
            RestApiId: !Ref ExcelApi
            Path: /evaluations/{userId}/{compId}/{timeStamp}
            Method: get
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
            - Sid: DynamoDBGetPolicy # Creates a specific, custom inline policy
              Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:Scan
              Resource:
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                  - { tableName: !Ref EvaluationsDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                  - { tableName: !Ref EvaluationsDDBTable}
      Environment:
        Variables:
          EVALUATIONS_DDB_TABLE_NAME: !Ref EvaluationsDDBTable # Allows us to access the var "EVALUATIONS_DDB_TABLE_NAME" in this lambda's javascript code
  GetEvaluationScaleFunction: #Function for getting all of the evaluations in the table
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/evaluationScale/
      Handler: get.lambdaHandler
      Layers:
        - !Ref AuthenticationLayer
      Runtime: nodejs12.x
      Events:
        GetEvaluationScale:
          Type: Api
          Properties:
            RestApiId: !Ref ExcelApi
            Path: /evaluationScale
            Method: get
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
            - Sid: DynamoDBGetPolicy # Creates a specific, custom inline policy
              Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:Scan
              Resource:
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                  - { tableName: !Ref EvaluationScaleDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                  - { tableName: !Ref EvaluationScaleDDBTable}
      Environment:
        Variables:
          EVALUATION_SCALE_DDB_TABLE_NAME: !Ref EvaluationScaleDDBTable # Allows us to access the var "EVALUATION_SCALE_DDB_TABLE_NAME" in this lambda's javascript code
  AddEvaluationScaleFunction:
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/evaluationScale/
      Handler: post.lambdaHandler
      Layers:
        - !Ref AuthenticationLayer
        - !Ref DataValidation
      Runtime: nodejs12.x
      Events:
        AddEvaluationScale:
          Type: Api
          Properties:
            RestApiId: !Ref ExcelApi
            Path: /evaluationScale
            Method: post
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
            - Sid: DynamoDBPutPolicy # Creates a specific, custom inline policy
              Effect: Allow
              Action:
                - dynamodb:PutItem
              Resource:
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                  - { tableName: !Ref EvaluationScaleDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                  - { tableName: !Ref EvaluationScaleDDBTable}
      Environment:
        Variables:
          EVALUATION_SCALE_DDB_TABLE_NAME: !Ref EvaluationScaleDDBTable # Allows us to access the var "EVALUATIONS_DDB_TABLE_NAME" in this lambda's javascript code
  GetCompetenciesFunction:
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/competencies/ # Where does the Lambda's JavaScript file live in the folder directory? Aka the path from this file to the JS file you want
      Handler: get.lambdaHandler # {JS file name - .js} + . + {method name in that JS file}
      Layers:
        - !Ref AuthenticationLayer
      Runtime: nodejs12.x
      Events: # Answers "What events can trigger this Lambda?". In this case, it's an API call with a GET method to /competencies
        GetCompetencies:
          Type: Api
          Properties:
            RestApiId: !Ref ExcelApi
            Path: /competencies # What should the official API url be? It will be whatever you type here
            Method: get # Which HTTP method (get, post, delete, etc.) should will invoke this lambda when an API call is made at this path?
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
            - Sid: DynamoDBGetAndScanPolicy # Creates a specific, custom inline policy
              Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:Scan
              # Add resources for DeleteComp
              Resource:
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                  - { tableName: !Ref CompetenciesMasterDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                  - { tableName: !Ref CompetenciesMasterDDBTable}
      Environment:
        Variables:
          COMPETENCIES_DDB_TABLE_NAME: !Ref CompetenciesMasterDDBTable
  DeleteSpecificCompetencyFunction:
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/competencies/{competencyId}/{domain}
      Handler: delete.lambdaHandler
      Layers:
        - !Ref AuthenticationLayer
      Runtime: nodejs12.x
      Events:
        DeleteCompetencies:
          Type: Api
          Properties:
            RestApiId: !Ref ExcelApi
            Path: /competencies/{competencyId}/{domain}
            Method: delete
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
            - Sid: DynamoDBDeleteAndGetPolicy # Creates a specific, custom inline policy
              Effect: Allow
              Action:
                - dynamodb:DeleteItem
                - dynamodb:GetItem
              # Add resources for DeleteComp
              Resource:
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                  - { tableName: !Ref CompetenciesMasterDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                  - { tableName: !Ref CompetenciesMasterDDBTable}
      Environment:
        Variables:
          COMPETENCIES_DDB_TABLE_NAME: !Ref CompetenciesMasterDDBTable
  GetSpecificCompetencyFunction:
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/competencies/{competencyId}/{domain}
      Handler: get.lambdaHandler
      Layers:
        - !Ref AuthenticationLayer
      Runtime: nodejs12.x
      Events:
        GetSpecificCompetency:
          Type: Api
          Properties:
            RestApiId: !Ref ExcelApi
            Path: /competencies/{competencyId}/{domain}
            Method: get
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
            - Sid: DynamoDBGetPolicy # Creates a specific, custom inline policy
              Effect: Allow
              Action:
                - dynamodb:GetItem
              Resource:
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                  - { tableName: !Ref CompetenciesMasterDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                  - { tableName: !Ref CompetenciesMasterDDBTable}
      Environment:
        Variables:
          COMPETENCIES_DDB_TABLE_NAME: !Ref CompetenciesMasterDDBTable
  AddCompetenciesFunction:
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/competencies/
      Handler: post.lambdaHandler
      Layers:
        - !Ref AuthenticationLayer
        - !Ref DataValidation
      Runtime: nodejs12.x
      Events:
        AddCompetencies:
          Type: Api
          Properties:
            RestApiId: !Ref ExcelApi
            Path: /competencies
            Method: post
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
            - Sid: DynamoDBPutPolicy # Creates a specific, custom inline policy
              Effect: Allow
              Action:
                - dynamodb:PutItem
              Resource:
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                  - { tableName: !Ref CompetenciesMasterDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                  - { tableName: !Ref CompetenciesMasterDDBTable}
      Environment:
        Variables:
          COMPETENCIES_DDB_TABLE_NAME: !Ref CompetenciesMasterDDBTable
  AddTrackingLocationToCompetenciesFunction:
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/tracking-location-to-competencies
      Handler: post.lambdaHandler
      Layers:
        - !Ref AuthenticationLayer
        - !Ref DataValidation
      Runtime: nodejs12.x
      Events:
        AddTrackingLocationToCompetencies:
          Type: Api
          Properties:
            RestApiId: !Ref ExcelApi
            Path: /tracking-locations-to-competencies
            Method: post
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
            - Sid: DynamoDBPutPolicy # Creates a specific, custom inline policy
              Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:Scan
                - dynamodb:GetItem
              Resource: # this should stay!
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                  - { tableName: !Ref TrackingLocationToCompetenciesDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                  - { tableName: !Ref TrackingLocationToCompetenciesDDBTable}
      Environment:
        Variables:
          TRACKING_LOCATIONS_TO_COMPETENCIES_DDB: !Ref TrackingLocationToCompetenciesDDBTable # Allows us to access the var in this lambda's javascript code
  DeleteTrackingLocationToCompetenciesFunction:
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/tracking-location-to-competencies/{locationId}
      Handler: delete.lambdaHandler
      Layers:
        - !Ref AuthenticationLayer
      Runtime: nodejs12.x
      Events:
        DeleteEvaluation:
          Type: Api
          Properties:
            RestApiId: !Ref ExcelApi
            Path: /tracking-locations-to-competencies/{locationId}
            Method: delete
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
            - Sid: DynamoDBDeletePolicy # Creates a specific, custom inline policy
              Effect: Allow
              Action:
                - dynamodb:DeleteItem
                - dynamodb:GetItem
              Resource: # this should stay too!
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                  - { tableName: !Ref TrackingLocationToCompetenciesDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                  - { tableName: !Ref TrackingLocationToCompetenciesDDBTable}
      Environment:
        Variables:
          TRACKING_LOCATIONS_TO_COMPETENCIES_DDB: !Ref TrackingLocationToCompetenciesDDBTable # Allows us to access the var in this lambda's javascript code
  GetSpecificTrackingLocationToCompetenciesFunction:
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/tracking-location-to-competencies/{locationId}
      Handler: get.lambdaHandler
      Layers:
        - !Ref AuthenticationLayer
      Runtime: nodejs12.x
      Events:
        GetSpecificLocation:
          Type: Api
          Properties:
            RestApiId: !Ref ExcelApi
            Path: /tracking-locations-to-competencies/{locationId}
            Method: get
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
          - Sid: DynamoDBGetPolicy
            Effect: Allow
            Action:
              - dynamodb:GetItem
            Resource: # this should stay as well!
              - !Sub
                - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                - { tableName: !Ref TrackingLocationToCompetenciesDDBTable}
              - !Sub
                - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                - { tableName: !Ref TrackingLocationToCompetenciesDDBTable}
      Environment:
        Variables:
          TRACKING_LOCATIONS_TO_COMPETENCIES_DDB: !Ref TrackingLocationToCompetenciesDDBTable 
  GetAllTrackingLocationToCompetenciesFunction:
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/tracking-location-to-competencies
      Handler: get.lambdaHandler
      Layers:
        - !Ref AuthenticationLayer
      Runtime: nodejs12.x
      Events:
        GetAllLocations:
          Type: Api
          Properties:
            RestApiId: !Ref ExcelApi
            Path: /tracking-locations-to-competencies
            Method: get
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
          - Sid: DynamoDBGetPolicy
            Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:Scan
            Resource: # this should stay as well!
              - !Sub
                - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                - { tableName: !Ref TrackingLocationToCompetenciesDDBTable}
              - !Sub
                - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                - { tableName: !Ref TrackingLocationToCompetenciesDDBTable}
      Environment:
        Variables:
          TRACKING_LOCATIONS_TO_COMPETENCIES_DDB: !Ref TrackingLocationToCompetenciesDDBTable
  GetSpecificUserFunction:
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/users/{userId}
      Handler: get.lambdaHandler
      Layers:
        - !Ref AuthenticationLayer
      Runtime: nodejs12.x
      Events:
        GetCompetencies:
          Type: Api
          Properties:
            RestApiId: !Ref ExcelApi
            Path: /users/{userId}
            Method: get
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
            - Sid: DynamoDBGetPolicy
              Effect: Allow
              Action:
                - dynamodb:GetItem
              Resource:
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                  - { tableName: !Ref UsersDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                  - { tableName: !Ref UsersDDBTable}
      Environment:
        Variables:
          USERS_DDB_TABLE_NAME: !Ref UsersDDBTable
  DeactivateUserFunction:
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/users/{userId}/deactivate
      Handler: deactivate.lambdaHandler
      Layers:
        - !Ref AuthenticationLayer
      Runtime: nodejs12.x
      Events:
        DeactivateUser:
          Type: Api
          Properties:
            RestApiId: !Ref ExcelApi
            Path: /users/{userId}/deactivate
            Method: delete
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
          - Sid: DeactivatePolicy # Creates a specific, custom inline policy
            Effect: Allow
            Action:
              - cognito-idp:AdminDisableUser
            # Add resources for DeleteComp
            Resource:
              - !Sub
                - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                - { tableName: !Ref CompetenciesMasterDDBTable}
              - !Sub
                - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                - { tableName: !Ref CompetenciesMasterDDBTable}
              - !Sub
                - arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${userPoolId}
                - { userPoolId: !Ref CognitoUserPool}
      Environment:
        Variables:
          USER_POOL_ID: !Ref CognitoUserPool
  AuthenticationLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: excel-tracking-authentication-layer
      Description: Token authentication for other requests
      ContentUri: auth/layer/
      CompatibleRuntimes:
        - nodejs12.x        
  GetUsersForTrackingLocationFunction: # Function for getting all of the evaluations for a specific student
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/users-to-tracking-location/{trackingLocationId}/{getAllUsersFlag}
      Handler: get.lambdaHandler
      Runtime: nodejs12.x
      Events:
        GetEvaluationsForUser:
          Type: Api
          Properties:
            RestApiId: !Ref ExcelApi
            Path: /users-to-tracking-location/{trackingLocationId}/{getAllUsersFlag}
            Method: get
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
            - Sid: DynamoDBGetPolicy # Creates a specific, custom inline policy
              Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:Scan
              Resource:
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                  - { tableName: !Ref UsersToTrackingLocationDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                  - { tableName: !Ref UsersToTrackingLocationDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                  - { tableName: !Ref UsersDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                  - { tableName: !Ref UsersDDBTable}
      Environment:
        Variables:
          USERS_TO_TRACKING_LOCATION_DDB_TABLE_NAME: !Ref UsersToTrackingLocationDDBTable # Allows us to access the var "EVALUATIONS_DDB_TABLE_NAME" in this lambda's javascript code
          USERS_DDB_TABLE_NAME: !Ref UsersDDBTable
  GetStudentsForSpecificMentorFunction: # Function for getting all students assigned to a specific mentor
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/users/mentors/{userId}/students
      Handler: get.lambdaHandler
      Runtime: nodejs12.x
      Events:
        GetEvaluationsForUser:
          Type: Api
          Properties:
            RestApiId: !Ref ExcelApi
            Path: /users/mentors/{userId}/students
            Method: get
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
            - Sid: DynamoDBGetPolicy # Creates a specific, custom inline policy
              Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:Scan
              Resource:
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                  - { tableName: !Ref UsersDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                  - { tableName: !Ref UsersDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                  - { tableName: !Ref UsersToTrackingLocationDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                  - { tableName: !Ref UsersToTrackingLocationDDBTable}
      Environment:
        Variables:
          USERS_TO_TRACKING_DDB_TABLE_NAME: !Ref UsersToTrackingLocationDDBTable
          USERS_DDB_TABLE_NAME: !Ref UsersDDBTable
  GetMentorsForSpecificStudentFunction: # Function for getting all students assigned to a specific mentor
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/users/students/{userId}/mentors
      Handler: get.lambdaHandler
      Runtime: nodejs12.x
      Events:
        GetEvaluationsForUser:
          Type: Api
          Properties:
            RestApiId: !Ref ExcelApi
            Path: /users/students/{userId}/mentors
            Method: get
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
            - Sid: DynamoDBGetPolicy # Creates a specific, custom inline policy
              Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:Scan
              Resource:
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                  - { tableName: !Ref UsersDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                  - { tableName: !Ref UsersDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                  - { tableName: !Ref UsersToTrackingLocationDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                  - { tableName: !Ref UsersToTrackingLocationDDBTable}
      Environment:
        Variables:
          USERS_TO_TRACKING_DDB_TABLE_NAME: !Ref UsersToTrackingLocationDDBTable
          USERS_DDB_TABLE_NAME: !Ref UsersDDBTable
  GetMentorsFunction: # Function for getting all users who are mentors
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/users/mentors/
      Handler: get.lambdaHandler
      Runtime: nodejs12.x
      Timeout: 30
      Events:
        GetEvaluationsForUser:
          Type: Api
          Properties:
            RestApiId: !Ref ExcelApi
            Path: /users/mentors/
            Method: get
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
            - Sid: DynamoDBGetPolicy # Creates a specific, custom inline policy
              Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:Scan
                - cognito-idp:AdminGetUser
              Resource:
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                  - { tableName: !Ref UsersDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                  - { tableName: !Ref UsersDDBTable}
                - !Sub
                  - arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${userPoolId}
                  - { userPoolId: !Ref CognitoUserPool}
      Environment:
        Variables:
          USERS_DDB_TABLE_NAME: !Ref UsersDDBTable
          USER_POOL_ID: !Ref CognitoUserPool
  AddUserToTrackingLocationFunction: # Function for getting all users who are mentors
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/users-to-tracking-location
      Handler: post.lambdaHandler
      Layers:
        - !Ref DataValidation
        - !Ref AuthenticationLayer
      Runtime: nodejs12.x
      Events:
        GetEvaluationsForUser:
          Type: Api
          Properties:
            RestApiId: !Ref ExcelApi
            Path: /users-to-tracking-location
            Method: post
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
            - Sid: DynamoDBGetPolicy # Creates a specific, custom inline policy
              Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:Scan
              Resource:
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                  - { tableName: !Ref UsersToTrackingLocationDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                  - { tableName: !Ref UsersToTrackingLocationDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                  - { tableName: !Ref UsersDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                  - { tableName: !Ref UsersDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                  - { tableName: !Ref TrackingLocationToCompetenciesDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                  - { tableName: !Ref TrackingLocationToCompetenciesDDBTable}
      Environment:
        Variables:
          USERS_TO_TRACKING_DDB_TABLE_NAME: !Ref UsersToTrackingLocationDDBTable
          USERS_DDB_TABLE_NAME: !Ref UsersDDBTable
          TRACKING_LOCATIONS_TO_COMPETENCIES_DDB_TABLE_NAME : !Ref TrackingLocationToCompetenciesDDBTable
  GetAllUserToTrackingLocationFunction: # Function for getting all users who are mentors
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/users-to-tracking-location
      Handler: get.lambdaHandler
      Runtime: nodejs12.x
      Events:
        GetEvaluationsForUser:
          Type: Api
          Properties:
            RestApiId: !Ref ExcelApi
            Path: /users-to-tracking-location
            Method: get
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
            - Sid: DynamoDBGetPolicy # Creates a specific, custom inline policy
              Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:Scan
              Resource:
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                  - { tableName: !Ref UsersToTrackingLocationDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                  - { tableName: !Ref UsersToTrackingLocationDDBTable}
      Environment:
        Variables:
          USERS_TO_TRACKING_DDB_TABLE_NAME: !Ref UsersToTrackingLocationDDBTable
  DeleteUserToTrackingLocationFunction: # Function for getting all users who are mentors
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/users-to-tracking-location/users/{userId}
      Handler: delete.lambdaHandler
      Layers:
        - !Ref AuthenticationLayer
      Runtime: nodejs12.x
      Events:
        GetEvaluationsForUser:
          Type: Api
          Properties:
            RestApiId: !Ref ExcelApi
            Path: /users-to-tracking-location/users/{userId}
            Method: delete
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
            - Sid: DynamoDBGetPolicy # Creates a specific, custom inline policy
              Effect: Allow
              Action:
                - dynamodb:DeleteItem
                - dynamodb:GetItem
              Resource:
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                  - { tableName: !Ref UsersToTrackingLocationDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                  - { tableName: !Ref UsersToTrackingLocationDDBTable}
      Environment:
        Variables:
          USERS_TO_TRACKING_DDB_TABLE_NAME: !Ref UsersToTrackingLocationDDBTable
  DeleteUserFunction:
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/users/{userId}
      Handler: delete.lambdaHandler
      Layers:
        - !Ref AuthenticationLayer
      Runtime: nodejs12.x
      Events:
        GetCompetencies:
          Type: Api
          Properties:
            RestApiId: !Ref ExcelApi
            Path: /users/{userId}
            Method: delete
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
            - Sid: DynamoDBDeletePolicy # Creates a specific, custom inline policy
              Effect: Allow
              Action:
                - dynamodb:DeleteItem
                - dynamodb:GetItem
              Resource:
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                  - { tableName: !Ref UsersDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                  - { tableName: !Ref UsersDDBTable}
      Environment:
        Variables:
          USERS_DDB_TABLE_NAME: !Ref UsersDDBTable
  GetStudentsFunction: # Function for getting all users who are students
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/users/students/
      Handler: get.lambdaHandler
      Runtime: nodejs12.x
      Timeout: 30
      Events:
        GetEvaluationsForUser:
          Type: Api
          Properties:
            RestApiId: !Ref ExcelApi
            Path: /users/students/
            Method: get
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
            - Sid: DynamoDBGetPolicy # Creates a specific, custom inline policy
              Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:Scan
                - cognito-idp:AdminGetUser
              Resource:
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                  - { tableName: !Ref UsersDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                  - { tableName: !Ref UsersDDBTable}
                - !Sub
                  - arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${userPoolId}
                  - { userPoolId: !Ref CognitoUserPool}
      Environment:
        Variables:
          USERS_DDB_TABLE_NAME: !Ref UsersDDBTable
          USER_POOL_ID: !Ref CognitoUserPool

  LoginFunction: # Function for getting all users who are students
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: login/
      Handler: login.lambdaHandler
      Runtime: nodejs12.x
      Events:
        Login:
          Type: Api
          Properties:
            RestApiId: !Ref ExcelApi
            Path: /login/
            Method: post
            Auth: 
              Authorizer: NONE
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
            - Sid: LoginPolicy # Creates a specific, custom inline policy
              Effect: Allow
              Action:
                - cognito-idp:AdminInitiateAuth
              Resource:
                - !Sub
                  - arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${userPoolId}
                  - { userPoolId: !Ref CognitoUserPool}
      Environment:
        Variables:
          USER_POOL_ID: !Ref CognitoUserPool
          USER_POOL_CLIENT: !Ref CognitoUserPoolClient
  DataValidation:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: sam-app-common-layer
      Description: Data validation for other requests
      ContentUri: functions/validation/
      CompatibleRuntimes:
        - nodejs12.x
  ############ SES Identity Name #################
  IdentityName:
    Type: AWS::SES::ConfigurationSet
  ############ S3 Buckets ##################
  EvaluationsExportS3Bucket:
    Type: AWS::S3::Bucket
  ############ DynamoDB Databases ############
  CompetenciesMasterDDBTable: # Master table to store info about each competency
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "CompetencyId"
          AttributeType: "S"
        - AttributeName: "Domain"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "CompetencyId"
          KeyType: "HASH"
        - AttributeName: "Domain"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "CompetenciesMaster"
  EvaluationsDDBTable: # Holds all individual evaluations
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "UserIdBeingEvaluated"
          AttributeType: "S"
        - AttributeName: "CompetencyId_Timestamp"
          AttributeType: "S"
        - AttributeName: "DateEvaluated"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "UserIdBeingEvaluated"
          KeyType: "HASH"
        - AttributeName: "CompetencyId_Timestamp"
          KeyType: "RANGE" # This is the SK
      LocalSecondaryIndexes:
        - IndexName: "DateEvaluatedIndex"
          KeySchema:
            - AttributeName: "UserIdBeingEvaluated"
              KeyType: "HASH"
            - AttributeName: "DateEvaluated"
              KeyType: "RANGE" # This is the SK
          Projection:
            ProjectionType: "ALL"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "Evaluations"
  UsersDDBTable: # Stores info for all possible users of this application (students, faculty/staff, etc.)
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "UserId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "UserId"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "Users"
  TrackingLocationToCompetenciesDDBTable: # Maps the tracking location (a class or type of advising) to all competencies evaluated in that class/advising type
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "LocationId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "LocationId"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "TrackingLocationToCompetencies"
  UsersToTrackingLocationDDBTable: # Maps a given user to all the tracking locations they are currently a part of (essentially a student's schedule)
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "UserId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "UserId"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "UsersToTrackingLocation"
  EvaluationScaleDDBTable: # Contains the textual description of what each evaluation score represents
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "EvaluationScore"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "EvaluationScore"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "EvaluationScale"

  ############ Authentication / API Gateway ############
  ExcelApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      # Cors: "'*'"
      Auth:
        DefaultAuthorizer: MyCognitoAuthorizer
        Authorizers:
          MyCognitoAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Ref CognitoUserPoolName
      # Policies: # Use this if you want to enforce various password settings
      #   PasswordPolicy:
      #     MinimumLength: 11
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: True
      AutoVerifiedAttributes:
        - email
      #UsernameAttributes: # Use this if you want to mandate that their username is their email
        #- email
      Schema:
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: role
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: cohort
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: gtid
          AttributeDataType: String
          Mutable: true
          Required: false
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: !Ref CognitoUserPoolClientName
      GenerateSecret: false
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs:
        - https://www.google.com
      AllowedOAuthFlows: # TODO: can we scope this back?
        - code
        - implicit
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes: # TODO: can we scope this back?
        - phone
        - email
        - openid
        - profile
        - aws.cognito.signin.user.admin
      ExplicitAuthFlows: # TODO: can we scope this back?
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_CUSTOM_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
  CognitoUserPoolDomain: 
    Type: AWS::Cognito::UserPoolDomain 
    Properties:
      UserPoolId: !Ref CognitoUserPool 
      Domain: "excel-tracking-gt"


Outputs: # These outputs are just for our benefit if we want quick access to the ARNs or HTTP address.
         # They're shown in the console after a successful 'sam deploy'
  CognitoUserPoolId:
    Description: "Cognito User Pool Id"
    Value: !Ref CognitoUserPool

  CognitoUserPoolClientId:
    Description: "Cognito User Pool Client Id"
    Value: !Ref CognitoUserPoolClient
