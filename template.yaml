AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  excel-competencies-tracking

  In API Gateway, this API is called 'excel-competencies-tracking-sam-app'

  SAM Template for excel-competencies-tracking repo (https://github.com/walkman1915/excel-competencies-tracking).
  Junior Design project for team JD 9350.

Globals:
  Function:
    Timeout: 3
Resources:
  ############ Lambda Functions ############
  AddUserFunction:
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/users/
      Handler: post.lambdaHandler
      Runtime: nodejs12.x
      Events:
        GetCompetencies:
          Type: Api
          Properties:
            Path: /users
            Method: post
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
          - Sid: DynamoDBPutPolicy # Creates a specific, custom inline policy
            Effect: Allow
            Action:
              - dynamodb:PutItem
            Resource:
              - !Sub
                - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                - { tableName: !Ref UsersDDBTable}
              - !Sub
                - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                - { tableName: !Ref UsersDDBTable}
      Environment:
        Variables:
          USERS_DDB_TABLE_NAME: !Ref UsersDDBTable # Allows us to access the var "USERS_DDB_TABLE_NAME" in this lambda's javascript code
  AddEvaluationFunction: #Function for adding a new evaluation to the table
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/evaluations/
      Handler: post.lambdaHandler
      Runtime: nodejs12.x
      Events:
        AddEvaluation:
          Type: Api
          Properties:
            Path: /evaluations
            Method: post
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
          - Sid: DynamoDBPutPolicy # Creates a specific, custom inline policy
            Effect: Allow
            Action:
              - dynamodb:PutItem
            Resource:
              - !Sub
                - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                - { tableName: !Ref EvaluationsDDBTable}
              - !Sub
                - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                - { tableName: !Ref EvaluationsDDBTable}
      Environment:
        Variables:
          EVALUATIONS_DDB_TABLE_NAME: !Ref EvaluationsDDBTable # Allows us to access the var "EVALUATIONS_DDB_TABLE_NAME" in this lambda's javascript code  
  DeleteEvaluationFunction: #Function for deleting a specific evaluation from the table
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/evaluations/{userId}/{compId}/{timeStamp}  
      Handler: delete.lambdaHandler
      Runtime: nodejs12.x
      Events:
        DeleteEvaluation:
          Type: Api
          Properties:
            Path: /evaluations/{userId}/{compId}/{timeStamp}
            Method: delete
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
          - Sid: DynamoDBDeletePolicy # Creates a specific, custom inline policy
            Effect: Allow
            Action:
              - dynamodb:DeleteItem
              - dynamodb:GetItem
            Resource:
              - !Sub
                - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                - { tableName: !Ref EvaluationsDDBTable}
              - !Sub
                - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                - { tableName: !Ref EvaluationsDDBTable}
      Environment:
        Variables:
          EVALUATIONS_DDB_TABLE_NAME: !Ref EvaluationsDDBTable # Allows us to access the var "EVALUATIONS_DDB_TABLE_NAME" in this lambda's javascript code  
  GetEvaluationsFunction: #Function for getting all of the evaluations in the table
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/evaluations/
      Handler: get.lambdaHandler
      Runtime: nodejs12.x
      Events:
        GetEvaluations:
          Type: Api
          Properties:
            Path: /evaluations
            Method: get
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
          - Sid: DynamoDBGetPolicy # Creates a specific, custom inline policy
            Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:Scan
            Resource:
              - !Sub
                - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                - { tableName: !Ref EvaluationsDDBTable}
              - !Sub
                - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                - { tableName: !Ref EvaluationsDDBTable}
      Environment:
        Variables:
          EVALUATIONS_DDB_TABLE_NAME: !Ref EvaluationsDDBTable # Allows us to access the var "EVALUATIONS_DDB_TABLE_NAME" in this lambda's javascript code  
  GetEvaluationsForUserFunction: # Function for getting all of the evaluations for a specific student
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/evaluations/{userId}
      Handler: get.lambdaHandler
      Runtime: nodejs12.x
      Events:
        GetEvaluationsForUser:
          Type: Api
          Properties:
            Path: /evaluations/{userId}
            Method: get
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
          - Sid: DynamoDBGetPolicy # Creates a specific, custom inline policy
            Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:Scan
            Resource:
              - !Sub
                - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                - { tableName: !Ref EvaluationsDDBTable}
              - !Sub
                - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                - { tableName: !Ref EvaluationsDDBTable}
      Environment:
        Variables:
          EVALUATIONS_DDB_TABLE_NAME: !Ref EvaluationsDDBTable # Allows us to access the var "EVALUATIONS_DDB_TABLE_NAME" in this lambda's javascript code  
  GetEvaluationsForUserAndCompFunction: # Function for getting all of the evaluations for a specific student for a specific competency
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/evaluations/{userId}/{compId}
      Handler: get.lambdaHandler
      Runtime: nodejs12.x
      Events:
        GetEvaluationsForUserAndComp:
          Type: Api
          Properties:
            Path: /evaluations/{userId}/{compId}
            Method: get
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
          - Sid: DynamoDBGetPolicy # Creates a specific, custom inline policy
            Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:Scan
            Resource:
              - !Sub
                - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                - { tableName: !Ref EvaluationsDDBTable}
              - !Sub
                - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                - { tableName: !Ref EvaluationsDDBTable}
      Environment:
        Variables:
          EVALUATIONS_DDB_TABLE_NAME: !Ref EvaluationsDDBTable # Allows us to access the var "EVALUATIONS_DDB_TABLE_NAME" in this lambda's javascript code  
  GetSpecificEvaluationFunction: # Function for getting a specific evaluation matching a user id, comp id, and timestamp
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/evaluations/{userId}/{compId}/{timeStamp}
      Handler: get.lambdaHandler
      Runtime: nodejs12.x
      Events:
        GetSpecificEvaluation:
          Type: Api
          Properties:
            Path: /evaluations/{userId}/{compId}/{timeStamp}
            Method: get
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
          - Sid: DynamoDBGetPolicy # Creates a specific, custom inline policy
            Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:Scan
            Resource:
              - !Sub
                - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                - { tableName: !Ref EvaluationsDDBTable}
              - !Sub
                - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                - { tableName: !Ref EvaluationsDDBTable}
      Environment:
        Variables:
          EVALUATIONS_DDB_TABLE_NAME: !Ref EvaluationsDDBTable # Allows us to access the var "EVALUATIONS_DDB_TABLE_NAME" in this lambda's javascript code
  GetEvaluationScaleFunction: #Function for getting all of the evaluations in the table
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/evaluationScale/
      Handler: get.lambdaHandler
      Runtime: nodejs12.x
      Events:
        GetEvaluationScale:
          Type: Api
          Properties:
            Path: /evaluationScale
            Method: get
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
          - Sid: DynamoDBGetPolicy # Creates a specific, custom inline policy
            Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:Scan
            Resource:
              - !Sub
                - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                - { tableName: !Ref EvaluationScaleDDBTable}
              - !Sub
                - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                - { tableName: !Ref EvaluationScaleDDBTable}
      Environment:
        Variables:
          EVALUATION_SCALE_DDB_TABLE_NAME: !Ref EvaluationScaleDDBTable # Allows us to access the var "EVALUATION_SCALE_DDB_TABLE_NAME" in this lambda's javascript code
  AddEvaluationScaleFunction:
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/evaluationScale/
      Handler: post.lambdaHandler
      Runtime: nodejs12.x
      Events:
        AddEvaluationScale:
          Type: Api
          Properties:
            Path: /evaluationScale
            Method: post
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
          - Sid: DynamoDBPutPolicy # Creates a specific, custom inline policy
            Effect: Allow
            Action:
              - dynamodb:PutItem
            Resource:
              - !Sub
                - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                - { tableName: !Ref EvaluationScaleDDBTable}
              - !Sub
                - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                - { tableName: !Ref EvaluationScaleDDBTable}
      Environment:
        Variables:
          EVALUATION_SCALE_DDB_TABLE_NAME: !Ref EvaluationScaleDDBTable # Allows us to access the var "EVALUATIONS_DDB_TABLE_NAME" in this lambda's javascript code
  GetCompetenciesFunction:
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/competencies/ # Where does the Lambda's JavaScript file live in the folder directory? Aka the path from this file to the JS file you want
      Handler: get.lambdaHandler # {JS file name - .js} + . + {method name in that JS file}
      Runtime: nodejs12.x
      Events: # Answers "What events can trigger this Lambda?". In this case, it's an API call with a GET method to /competencies
        GetCompetencies:
          Type: Api
          Properties:
            Path: /competencies # What should the official API url be? It will be whatever you type here
            Method: get # Which HTTP method (get, post, delete, etc.) should will invoke this lambda when an API call is made at this path?
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
          - Sid: DynamoDBGetAndScanPolicy # Creates a specific, custom inline policy
            Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:Scan
            # Add resources for DeleteComp
            Resource:
              - !Sub
                - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                - { tableName: !Ref CompetenciesMasterDDBTable}
              - !Sub
                - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                - { tableName: !Ref CompetenciesMasterDDBTable}
      Environment:
        Variables:
          COMPETENCIES_DDB_TABLE_NAME: !Ref CompetenciesMasterDDBTable
  DeleteSpecificCompetencyFunction:
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/competencies/{competencyId}
      Handler: delete.lambdaHandler
      Runtime: nodejs12.x
      Events:
        DeleteCompetencies:
          Type: Api
          Properties:
            Path: /competencies/{competencyId}
            Method: delete
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
          - Sid: DynamoDBDeleteAndGetPolicy # Creates a specific, custom inline policy
            Effect: Allow
            Action:
              - dynamodb:DeleteItem
              - dynamodb:GetItem
            # Add resources for DeleteComp
            Resource:
              - !Sub
                - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                - { tableName: !Ref CompetenciesMasterDDBTable}
              - !Sub
                - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                - { tableName: !Ref CompetenciesMasterDDBTable}
      Environment:
        Variables:
          COMPETENCIES_DDB_TABLE_NAME: !Ref CompetenciesMasterDDBTable
  GetSpecificCompetencyFunction:
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/competencies/{competencyId}
      Handler: get.lambdaHandler
      Runtime: nodejs12.x
      Events:
        GetSpecificCompetency:
          Type: Api
          Properties:
            Path: /competencies/{competencyId}
            Method: get
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
          - Sid: DynamoDBGetPolicy # Creates a specific, custom inline policy
            Effect: Allow
            Action:
              - dynamodb:GetItem
            Resource:
              - !Sub
                - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                - { tableName: !Ref CompetenciesMasterDDBTable}
              - !Sub
                - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                - { tableName: !Ref CompetenciesMasterDDBTable}
      Environment:
        Variables:
          COMPETENCIES_DDB_TABLE_NAME: !Ref CompetenciesMasterDDBTable 
  AddCompetenciesFunction:
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/competencies/
      Handler: post.lambdaHandler
      Runtime: nodejs12.x
      Events:
        AddCompetencies:
          Type: Api
          Properties:
              Path: /competencies
              Method: post
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
          - Sid: DynamoDBPutPolicy # Creates a specific, custom inline policy
            Effect: Allow
            Action:
              - dynamodb:PutItem
            Resource:
              - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                  - { tableName: !Ref CompetenciesMasterDDBTable}
              - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                  - { tableName: !Ref CompetenciesMasterDDBTable}
      Environment:
        Variables:
          COMPETENCIES_DDB_TABLE_NAME: !Ref CompetenciesMasterDDBTable 
  AddTrackingLocationToCompetenciesFunction:
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/tracking_location_to_competencies/
      Handler: post.lambdaHandler
      Runtime: nodejs12.x
      Events:
        AddTrackingLocationToCompetencies:
          Type: Api
          Properties:
            Path: /TrackingLocationToCompetencies
            Method: post
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
          - Sid: DynamoDBPutPolicy # Creates a specific, custom inline policy
            Effect: Allow
            Action:
              - dynamodb:PutItem
              - dynamodb:Scan
              - dynamodb:GetItem
            Resource: # this should stay!
              - !Sub
                - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                - { tableName: !Ref TrackingLocationToCompetenciesDDBTable}
              - !Sub
                - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                - { tableName: !Ref TrackingLocationToCompetenciesDDBTable}
      Environment:
        Variables:
          TRACKING_LOCATIONS_TO_COMPETENCIES_DDB: !Ref TrackingLocationToCompetenciesDDBTable # Allows us to access the var in this lambda's javascript code
  DeleteTrackingLocationToCompetenciesFunction: 
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/tracking_location_to_competencies//{locationId}
      Handler: delete.lambdaHandler
      Runtime: nodejs12.x
      Events:
        DeleteEvaluation:
          Type: Api
          Properties:
            Path: /TrackingLocationToCompetencies/{locationId}
            Method: delete
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
          - Sid: DynamoDBDeletePolicy # Creates a specific, custom inline policy
            Effect: Allow
            Action:
              - dynamodb:DeleteItem
              - dynamodb:GetItem
            Resource: # this should stay too!
              - !Sub
                - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                - { tableName: !Ref TrackingLocationToCompetenciesDDBTable}
              - !Sub
                - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                - { tableName: !Ref TrackingLocationToCompetenciesDDBTable}
      Environment:
        Variables:
          TRACKING_LOCATIONS_TO_COMPETENCIES_DDB: !Ref TrackingLocationToCompetenciesDDBTable # Allows us to access the var in this lambda's javascript code  
  GetSpecificTrackingLocationToCompetenciesFunction:
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/tracking_location_to_competencies/{locationId}
      Handler: get.lambdaHandler
      Runtime: nodejs12.x
      Events:
        GetCompetencies:
          Type: Api
          Properties:
            Path: /TrackingLocationToCompetencies/{locationId}
            Method: get
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
          - Sid: DynamoDBGetPolicy
            Effect: Allow
            Action:
              - dynamodb:GetItem
            Resource: # this should stay as well!
              - !Sub
                - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                - { tableName: !Ref TrackingLocationToCompetenciesDDBTable}
              - !Sub
                - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                - { tableName: !Ref TrackingLocationToCompetenciesDDBTable}
      Environment:
        Variables:
          TRACKING_LOCATIONS_TO_COMPETENCIES_DDB: !Ref TrackingLocationToCompetenciesDDBTable 
  GetSpecificUserFunction:
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/users/{userId}
      Handler: get.lambdaHandler
      Runtime: nodejs12.x
      Events:
        GetCompetencies:
          Type: Api
          Properties:
            Path: /users/{userId}
            Method: get
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
          - Sid: DynamoDBGetPolicy
            Effect: Allow
            Action:
              - dynamodb:GetItem
            Resource:
              - !Sub
                - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                - { tableName: !Ref UsersDDBTable}
              - !Sub
                - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                - { tableName: !Ref UsersDDBTable}
      Environment:
        Variables:
          USERS_DDB_TABLE_NAME: !Ref UsersDDBTable
  GetUsersForTrackingLocationFunction: # Function for getting all of the evaluations for a specific student
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/users-to-tracking-location/{trackingLocationId}/{getAllUsersFlag}
      Handler: get.lambdaHandler
      Runtime: nodejs12.x
      Events:
        GetEvaluationsForUser:
          Type: Api
          Properties:
            Path: /users-to-tracking-location/{trackingLocationId}/{getAllUsersFlag}
            Method: get
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
          - Sid: DynamoDBGetPolicy # Creates a specific, custom inline policy
            Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:Scan
            Resource:
              - !Sub
                - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                - { tableName: !Ref UsersToTrackingLocationDDBTable}
              - !Sub
                - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                - { tableName: !Ref UsersToTrackingLocationDDBTable}
              - !Sub
                - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                - { tableName: !Ref UsersDDBTable}
              - !Sub
                - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                - { tableName: !Ref UsersDDBTable}
      Environment:
        Variables:
          USERS_TO_TRACKING_LOCATION_DDB_TABLE_NAME: !Ref UsersToTrackingLocationDDBTable # Allows us to access the var "EVALUATIONS_DDB_TABLE_NAME" in this lambda's javascript code          
          USERS_DDB_TABLE_NAME: !Ref UsersDDBTable
  GetStudentsForSpecificMentorFunction: # Function for getting all students assigned to a specific mentor
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/users/mentors/{userId}/students
      Handler: get.lambdaHandler
      Runtime: nodejs12.x
      Events:
        GetEvaluationsForUser:
          Type: Api
          Properties:
            Path: /users/mentors/{userId}/students
            Method: get
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
            - Sid: DynamoDBGetPolicy # Creates a specific, custom inline policy
              Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:Scan
              Resource:
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                  - { tableName: !Ref UsersDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                  - { tableName: !Ref UsersDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                  - { tableName: !Ref UsersToTrackingLocationDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                  - { tableName: !Ref UsersToTrackingLocationDDBTable}
      Environment:
        Variables:
          USERS_TO_TRACKING_DDB_TABLE_NAME: !Ref UsersToTrackingLocationDDBTable
          USERS_DDB_TABLE_NAME: !Ref UsersDDBTable
  GetMentorsForSpecificStudentFunction: # Function for getting all students assigned to a specific mentor
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/users/students/{userId}/mentors
      Handler: get.lambdaHandler
      Runtime: nodejs12.x
      Events:
        GetEvaluationsForUser:
          Type: Api
          Properties:
            Path: /users/students/{userId}/mentors
            Method: get
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
            - Sid: DynamoDBGetPolicy # Creates a specific, custom inline policy
              Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:Scan
              Resource:
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                  - { tableName: !Ref UsersDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                  - { tableName: !Ref UsersDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                  - { tableName: !Ref UsersToTrackingLocationDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                  - { tableName: !Ref UsersToTrackingLocationDDBTable}
      Environment:
        Variables:
          USERS_TO_TRACKING_DDB_TABLE_NAME: !Ref UsersToTrackingLocationDDBTable
          USERS_DDB_TABLE_NAME: !Ref UsersDDBTable
  GetMentorsFunction: # Function for getting all users who are mentors
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/users/mentors/
      Handler: get.lambdaHandler
      Runtime: nodejs12.x
      Events:
        GetEvaluationsForUser:
          Type: Api
          Properties:
            Path: /users/mentors/
            Method: get
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
            - Sid: DynamoDBGetPolicy # Creates a specific, custom inline policy
              Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:Scan
              Resource:
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                  - { tableName: !Ref UsersDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                  - { tableName: !Ref UsersDDBTable}
      Environment:
        Variables:
          USERS_DDB_TABLE_NAME: !Ref UsersDDBTable
  AddUserToTrackingLocationFunction: # Function for getting all users who are mentors
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/users-to-tracking-location
      Handler: post.lambdaHandler
      Runtime: nodejs12.x
      Events:
        GetEvaluationsForUser:
          Type: Api
          Properties:
            Path: /users-to-tracking-location
            Method: post
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
            - Sid: DynamoDBGetPolicy # Creates a specific, custom inline policy
              Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:Scan
              Resource:
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                  - { tableName: !Ref UsersToTrackingLocationDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                  - { tableName: !Ref UsersToTrackingLocationDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                  - { tableName: !Ref UsersDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                  - { tableName: !Ref UsersDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                  - { tableName: !Ref TrackingLocationToCompetenciesDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                  - { tableName: !Ref TrackingLocationToCompetenciesDDBTable}
      Environment:
        Variables:
          USERS_TO_TRACKING_DDB_TABLE_NAME: !Ref UsersToTrackingLocationDDBTable
          USERS_DDB_TABLE_NAME: !Ref UsersDDBTable
          TRACKING_LOCATIONS_TO_COMPETENCIES_DDB_TABLE_NAME : !Ref TrackingLocationToCompetenciesDDBTable
  GetAllUserToTrackingLocationFunction: # Function for getting all users who are mentors
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/users-to-tracking-location
      Handler: get.lambdaHandler
      Runtime: nodejs12.x
      Events:
        GetEvaluationsForUser:
          Type: Api
          Properties:
            Path: /users-to-tracking-location
            Method: get
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
            - Sid: DynamoDBGetPolicy # Creates a specific, custom inline policy
              Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:Scan
              Resource:
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                  - { tableName: !Ref UsersToTrackingLocationDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                  - { tableName: !Ref UsersToTrackingLocationDDBTable}
      Environment:
        Variables:
          USERS_TO_TRACKING_DDB_TABLE_NAME: !Ref UsersToTrackingLocationDDBTable
  DeleteUserToTrackingLocationFunction: # Function for getting all users who are mentors
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/users-to-tracking-location/users/{userId}
      Handler: delete.lambdaHandler
      Runtime: nodejs12.x
      Events:
        GetEvaluationsForUser:
          Type: Api
          Properties:
            Path: /users-to-tracking-location/users/{userId}
            Method: delete
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
            - Sid: DynamoDBGetPolicy # Creates a specific, custom inline policy
              Effect: Allow
              Action:
                - dynamodb:DeleteItem
                - dynamodb:GetItem
              Resource:
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                  - { tableName: !Ref UsersToTrackingLocationDDBTable}
                - !Sub
                  - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                  - { tableName: !Ref UsersToTrackingLocationDDBTable}
      Environment:
        Variables:
          USERS_TO_TRACKING_DDB_TABLE_NAME: !Ref UsersToTrackingLocationDDBTable
  DeleteUserFunction:
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/users/{userId}
      Handler: delete.lambdaHandler
      Runtime: nodejs12.x
      Events:
        GetCompetencies:
          Type: Api
          Properties:
            Path: /users/{userId}
            Method: delete
      Policies: # Lists permissions; what is this lambda allowed to do/interact with?
        - Statement:
          - Sid: DynamoDBDeletePolicy # Creates a specific, custom inline policy
            Effect: Allow
            Action:
              - dynamodb:DeleteItem
              - dynamodb:GetItem
            Resource:
              - !Sub
                - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                - { tableName: !Ref UsersDDBTable}
              - !Sub
                - arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                - { tableName: !Ref UsersDDBTable}
      Environment:
        Variables:
          USERS_DDB_TABLE_NAME: !Ref UsersDDBTable



  ############ DynamoDB Databases ############
  CompetenciesMasterDDBTable: # Master table to store info about each competency
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: "CompetencyId"
          AttributeType: "S"
      KeySchema: 
        - AttributeName: "CompetencyId"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      #TableName: "CompetenciesMaster"
  EvaluationsDDBTable: # Holds all individual evaluations
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: "UserIdBeingEvaluated"
          AttributeType: "S"
        - AttributeName: "CompetencyId_Timestamp"
          AttributeType: "S"
        - AttributeName: "DateEvaluated"
          AttributeType: "S"
      KeySchema: 
        - AttributeName: "UserIdBeingEvaluated"
          KeyType: "HASH"
        - AttributeName: "CompetencyId_Timestamp"
          KeyType: "RANGE" # This is the SK
      LocalSecondaryIndexes:
        - IndexName: "DateEvaluatedIndex"
          KeySchema: 
            - AttributeName: "UserIdBeingEvaluated"
              KeyType: "HASH"
            - AttributeName: "DateEvaluated"
              KeyType: "RANGE" # This is the SK
          Projection: 
            ProjectionType: "ALL"
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      #TableName: "Evaluations"
  UsersDDBTable: # Stores info for all possible users of this application (students, faculty/staff, etc.)
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: "UserId"
          AttributeType: "S"
      KeySchema: 
        - AttributeName: "UserId"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      #TableName: "Users"
  TrackingLocationToCompetenciesDDBTable: # Maps the tracking location (a class or type of advising) to all competencies evaluated in that class/advising type
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: "LocationId"
          AttributeType: "S"
      KeySchema: 
        - AttributeName: "LocationId"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      #TableName: "TrackingLocationToCompetencies"
  UsersToTrackingLocationDDBTable: # Maps a given user to all the tracking locations they are currently a part of (essentially a student's schedule)
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: "UserId"
          AttributeType: "S"
      KeySchema: 
        - AttributeName: "UserId"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      #TableName: "UsersToTrackingLocation"
  EvaluationScaleDDBTable: # Contains the textual description of what each evaluation score represents
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: "EvaluationScore"
          AttributeType: "S"
      KeySchema: 
        - AttributeName: "EvaluationScore"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      #TableName: "EvaluationScale"


Outputs: # These outputs are just for our benefit if we want quick access to the ARNs or HTTP address.
         # They're shown in the console after a successful 'sam deploy'
  ExcelCompetenciesTrackingApi:
    Description: API Gateway endpoint URL for Prod stage for Excel Competencies Tracking project
    Value:
      Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/
  GetCompetenciesFunction: # For consistency's sake, keep this name the same as the function's resource name above
    Description: Get Competencies Lambda Function ARN
    Value:
      Fn::GetAtt:
      - GetCompetenciesFunction
      - Arn
  GetCompetenciesFunctionIamRole: # This must literally be {function's resource name} + "IamRole"
    Description: Implicit IAM Role created for Get Competencies function
    Value:
      Fn::GetAtt:
      - GetCompetenciesFunctionRole
      - Arn
  CompetenciesMasterDDBTable:
    Description: Competencies Master Dynamo DB Table ARN
    Value: !GetAtt CompetenciesMasterDDBTable.Arn
